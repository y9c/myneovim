{
  // log
  // "coc.preferences.messageLevel": "error",
  // suggest
  "suggest.triggerAfterInsertEnter": false,
  "suggest.timeout": 500,
  "suggest.noselect": false,
  "suggest.detailField": "abbr",
  "suggest.snippetIndicator": "üåü",
  "suggest.triggerCompletionWait": 100,
  "suggest.echodocSupport": true,
  "suggest.completionItemKindLabels": {
    "keyword": "\uf1de",
    "variable": "\ue79b",
    "value": "\uf89f",
    "operator": "\u03a8",
    "function": "\u2A15",
    "reference": "\ufa46",
    "constant": "\uf8fe",
    "method": "\uf09a",
    "struct": "\ufb44",
    "class": "\uf0e8",
    "interface": "\uf417",
    "text": "\u2663",
    "enum": "\uf435",
    "enumMember": "\uf02b",
    "module": "\uf530",
    "color": "\ue22b",
    "property": "\ue624",
    "field": "\uf6a6",
    "unit": "\uf475",
    "event": "\ufacd",
    "file": "\uf723",
    "folder": "\uf114",
    "snippet": "\ue60b",
    "typeParameter": "\uf728",
    "default": "\uf29c"
  },
  //diagnostic
  "diagnostic.signOffset": 9999999,
  "diagnostic.errorSign": "‚óè",
  "diagnostic.warningSign": "‚óè",
  "diagnostic.displayByAle": false,
  "diagnostic.refreshOnInsertMode": true,
  //diagnostic-languageserver
  "diagnostic-languageserver.filetypes": {
    "sh": "shellcheck"
  },
  "diagnostic-languageserver.formatFiletypes": {
    "sh": "shfmt"
  },
  "diagnostic-languageserver.formatters": {
    "shfmt": {
      "command": "shfmt",
      // primarily listed here to call out that flags which take an
      // argument (such as `-i <num-spaces>` for specifying indentation)
      // should be split into two strings, the flag and then the value
      "args": ["-i", "4", "-bn", "-ci", "-sr"]
    }
  },
  //git
  "git.enableGutters": true,
  "git.branchCharacter": "\uf408",
  "git.addGBlameToBufferVar": true,
  "git.addGBlameToVirtualText": true,
  "git.virtualTextPrefix": " ‚ùØ‚ùØ‚ùØ ",
  "git.addedSign.hlGroup": "GitGutterAdd",
  "git.changedSign.hlGroup": "GitGutterChange",
  "git.removedSign.hlGroup": "GitGutterDelete",
  "git.topRemovedSign.hlGroup": "GitGutterDelete",
  "git.changeRemovedSign.hlGroup": "GitGutterChangeDelete",
  "git.addedSign.text": "‚ñé",
  "git.changedSign.text": "‚ñé",
  "git.removedSign.text": "‚ñè",
  "git.topRemovedSign.text": "‚ñî",
  "git.changeRemovedSign.text": "‚ñã",
  //Snippet
  "coc.preferences.snippetStatusText": "‚ìà ",
  //CocList
  "list.source.files.defaultOptions": ["--auto-preview"],
  "list.source.outline.defaultOptions": ["--auto-preview"],
  //format
  "coc.preferences.formatOnTypeFiletypes": ["markdown", "python"],
  //"coc.preferences.formatOnSaveFiletypes": ["markdown"],
  //prettier
  "prettier.disableLanguages": [],
  "prettier.statusItemText": "‚ìü ",
  "prettier.eslintIntegration": true,
  "prettier.tslintIntegration": true,
  "prettier.stylelintIntegration": false,
  //emmet
  "emmet.includeLanguages": {
    "vue-html": "html",
    "javascript": "javascriptreact"
  },
  //multiple curssors
  "cursors.nextKey": "<C-n>",
  "cursors.previousKey": "<C-p>",
  "cursors.cancelKey": "<esc>",
  //sessions
  "session.directory": "~/.cache/vim/session",
  // translator
  "translator.toLang": "zh",
  "translator.engines": ["bing"],
  "translator.maxsize": 20000,
  // spell-check
  "cSpell.language": "en",
  "cSpell.maxNumberOfProblems": 200,
  "cSpell.numSuggestions": 8,
  "cSpell.minWordLength": 4,
  "cSpell.enabledLanguageIds": [
    "plaintext",
    "text",
    "rst",
    "markdown",
    "yml",
    "toml"
  ],
  "cSpell.showStatus": false,
  // coc-explorer (removed)
  // "explorer.icon.expanded": "‚ñæ",
  // "explorer.icon.collapsed": "‚ñ∏",
  // "explorer.width": 30,
  // "explorer.icon.enableNerdfont": true,
  // "explorer.keyMappings": {
  //   "h": "gotoParent",
  //   "l": "expandOrShrink"
  // },
  // coc-template (removed)
  // "template.email": "yech1990@gmail.com",
  // "template.username": "Ye Chang",
  // "template.license": "MIT",
  // "template.templatesDirectory": "~/.config/nvim/templates",
  // golang
  "go.goplsOptions": {
    "usePlaceholders": true,
    "completeUnimported": true,
    "deepCompletion": true
  },
  // eslint
  "eslint.filetypes": ["javascript", "javascript.jsx", "javascriptreact"],
  "eslint.autoFix": true,
  "eslint.autoFixOnSave": true,
  // texlab, for latex
  "latex.forwardSearch.executable": "zathura",
  "latex.forwardSearch.args": ["--synctex-forward", "%l:1:%f", "%p"],
  // python
  "python.pythonPath": "/usr/bin/python3",
  "python.jediEnabled": false,
  "python.linting.pylintEnabled": true,
  "python.linting.mypyEnabled": true,
  "python.linting.pydocstyleEnabled": true,
  "python.linting.pylintPath": "pylint",
  "python.linting.mypyPath": "mypy",
  "python.linting.pydocstylePath": "pydocstyle",
  "python.sortImports.path": "isort",
  "python.formatting.provider": "black",
  "python.formatting.blackArgs": ["-l", "79"],
  // custom language server
  "languageserver": {
    "ccls": {
      "command": "ccls",
      "filetypes": ["c", "cpp", "objc", "objcpp"],
      "rootPatterns": [
        ".ccls",
        "compile_commands.json",
        ".vim/",
        ".git/",
        ".hg/"
      ],
      "initializationOptions": {
        "cache": {
          "directory": "/tmp/ccls"
        }
      }
    },
    "julia": {
      "command": "julia",
      "args": [
        "--startup-file=no",
        "--history-file=no",
        "-e",
        "using LanguageServer;\n       using Pkg;\n       import StaticLint;\n       import SymbolServer;\n       env_path = dirname(Pkg.Types.Context().env.project_file);\n       debug = false;\n       server = LanguageServer.LanguageServerInstance(stdin, stdout, debug, env_path, \"\", Dict());\n       server.runlinter = true;\n       run(server);"
      ],
      "filetypes": ["julia"]
    },
    "dart": {
      "command": "dart",
      "args": [
        "/opt/dart-sdk/bin/snapshots/analysis_server.dart.snapshot",
        "--lsp"
      ],
      "filetypes": ["dart"],
      "disableDynamicRegister": true,
      "trace.server": "verbose"
    },
    "lua": {
      "command": "/home/yc/.config/coc/extensions/coc-lua-data/tools/bin/lua-lsp",
      "filetypes": ["lua"]
    }
  }
}
