# why use yaml to manage plugins
# see http://genkisugimoto.com/blog/manage-vim-plugins-via-yamsource

# PackageManage{{{
- repo: Shougo/dein.vim

## YC: Add Template (not a good solution)
- repo: aperezdc/vim-template
  hook_add: source $VIM_PATH/modules/module-template.vim
# }}}

# Editor UI{{{
- repo: ryanoasis/vim-devicons
- repo: hardcoreplayers/spaceline.vim
- repo: hardcoreplayers/vim-buffet
- repo: mhinz/vim-startify
  hook_add: source  $VIM_PATH/modules/module-startify.vim
  hook_post_source: |
      function! StartifyEntryFormat()
        return 'WebDevIconsGetFileTypeSymbol(absolute_path) ." ". entry_path'
      endfunction
#}}}

# Completion{{{
- repo: neoclide/coc.nvim
  merge: 0
  build: 'yarn install --frozen-lockfile'
  hook_add: source  $VIM_PATH/modules/module-coc.vim

- repo: honza/vim-snippets
  depends : coc.nvim

# }}}

# Code{{{
- repo: editorconfig/editorconfig-vim

- repo: pechorin/any-jump.vim
  on_cmd: AnyJump
# }}}

# Lazy Loading
# ==========================================

# Find Everythins
- repo: liuchengxu/vim-clap
  build: 'sh ./install.sh'
  on_cmd: Clap
  hook_source: source $VIM_PATH/modules/module-clap.vim

# Interface{{{

- { repo: rhysd/accelerated-jk, on_map: { n: <Plug> } }

- repo: ludovicchabant/vim-gutentags
  if: executable('ctags')
  on_path: .*
  hook_source: source  $VIM_PATH/modules/module-gutentags.vim

- repo: t9md/vim-choosewin
  on_map: { n: <Plug> }
  hook_source: source  $VIM_PATH/modules/module-choosewin.vim


- repo: junegunn/vim-easy-align
  on_ft: [vim,json,go,html,js,jsx,py,css,less,tmpl,toml,xml,sql,Dockerfile]

- repo: psliwka/vim-smoothie
  on_func: smoothie#
  hook_add: |
    let g:smoothie_no_default_mappings = v:true

- repo: thinca/vim-quickrun
  on_cmd: QuickRun
  hook_source: source $VIM_PATH/modules/module-quickrun.vim

- {repo: simnalamburt/vim-mundo , on_map: { n: <Plug> } }

- {repo: tpope/vim-repeat , on_map: .* }

- repo: liuchengxu/vim-which-key
  on_cmd: [Whichkey, Whichkey!]
  hook_add: source  $VIM_PATH/modules/module-whichkey.vim
  hook_post_source: |
        call which_key#register('<Space>', 'g:which_key_map')
        call which_key#register(';', 'g:which_key_localmap')

- repo: easymotion/vim-easymotion
  on_map: { n: <Plug> }
  hook_source: |
        let g:EasyMotion_do_mapping = 0
        let g:EasyMotion_prompt = 'Jump to → '
        let g:EasyMotion_keys = 'fjdkswbeoavn'
        let g:EasyMotion_smartcase = 1
        let g:EasyMotion_use_smartsign_us = 1
# }}}

# File manager{{{
- repo: Shougo/defx.nvim
  on_cmd: Defx
  hook_source: source  $VIM_PATH/modules/module-defx.vim

- repo: kristijanhusak/defx-git
  on_source: defx.nvim
  hook_source: |
    let g:defx_git#indicators = {
      \ 'Modified'  : '•',
      \ 'Staged'    : '✚',
      \ 'Untracked' : 'ᵁ',
      \ 'Renamed'   : '≫',
      \ 'Unmerged'  : '≠',
      \ 'Ignored'   : 'ⁱ',
      \ 'Deleted'   : '✖',
      \ 'Unknown'   : '⁇'
      \ }


- repo: kristijanhusak/defx-icons
  on_source: defx.nvim
  hook_add: |
    let g:defx_icons_column_length = 1
    let g:defx_icons_mark_icon = ''

# }}}

# Terminal {{{
- repo: voldikss/vim-floaterm
  on_cmd: [FloatermNew,FloatermToggle,FloatermPrev,FloatermNext,FloatermSend]
  hook_source: source  $VIM_PATH/modules/module-floaterm.vim
# }}}


# Version control{{{
- { repo: jreybert/vimagit, on_cmd: Magit }

- repo: rhysd/committia.vim
  on_path: [ COMMIT_EDITMSG, MERGE_MSG ]
  hook_source: let g:committia_min_window_width = 7

- repo: tpope/vim-fugitive
  on_cmd: [ G, Git, Gfetch, Gpush, Glog, Gclog, Gdiffsplit ]
  hook_source:
    augroup user_fugitive_plugin
      autocmd!
      autocmd FileType fugitiveblame normal A
    augroup END

- { repo: lambdalisue/gina.vim, on_cmd: Gina }

- repo: Vigemus/iron.nvim
  if: has('nvim')
  on_cmd: [ IronRepl, IronReplHere, IronFocus, IronSend, IronWatchCurrentFile ]
  on_map: { nv: <Plug> }
  on_func: IronUnwatchFile
  hook_add: let g:iron_map_defaults = 0 | let g:iron_map_extended = 0
  hook_source: luafile $VIM_PATH/modules/module-iron.lua

# }}}

# Neovim Lua feature{{{
- repo: norcalli/nvim-colorizer.lua
  if: has('nvim-0.4')
  on_event: FileType
  hook_source: luafile $VIM_PATH/modules/module-colorizer.lua

# }}}

# Language{{{
#
- { repo: snakemake/snakefmt, on_ft: snakemake }
- { repo: rust-lang/rust.vim, on_ft: rust }
- { repo: chr4/nginx.vim, on_ft: nginx }
- { repo: honza/dockerfile.vim, on_ft: Dockerfile }
- { repo: cespare/vim-toml, on_ft: toml }
- { repo: elzr/vim-json, on_ft: json }

- repo: pearofducks/ansible-vim
  on_ft: [ ansible, ansible_hosts, jinja2 ]
  hook_add: |
    let g:ansible_extra_keywords_highlight = 1
    let g:ansible_template_syntaxes = {
      \   '*.json.j2': 'json',
      \   '*.(ba)?sh.j2': 'sh',
      \   '*.ya?ml.j2': 'yaml',
      \   '*.xml.j2': 'xml',
      \   '*.conf.j2': 'conf',
      \   '*.ini.j2': 'ini'
      \ }

- { repo: chemzqm/vim-jsx-improve, on_ft: [javascript,javascriptreact]}
- { repo: HerringtonDarkholme/yats.vim,on_ft: [ typescript, typescriptreact]}
- { repo: peitalin/vim-jsx-typescript, on_ft: [typescriptreact]}

- { repo: Vimjas/vim-python-pep8-indent, on_ft: python }
- { repo: vim-scripts/python_match.vim, on_ft: python }
- repo: vim-python/python-syntax
  on_ft: python
  hook_add: let g:python_highlight_all = 1
- { repo: raimon49/requirements.txt.vim, on_ft: requirements }

- repo: fatih/vim-go
  on_ft: [go,gomod]
  hook_source: |
    let g:go_gopls_enabled = 0
    let g:go_code_completion_enabled = 0
    let g:go_doc_keywordprg_enabled = 0
    let g:go_imports_autosave = 0
    let g:go_def_mapping_enabled = 0
    let g:go_mod_fmt_autosave = 0
    let g:go_highlight_array_whitespace_error = 1
    let g:go_highlight_chan_whitespace_error = 1
    let g:go_highlight_space_tab_error = 0
    let g:go_highlight_trailing_whitespace_error = 1
    let g:go_highlight_extra_types = 1
    let g:go_highlight_build_constraints = 1
    let g:go_highlight_extra_types = 1
    let g:go_highlight_fields = 1
    let g:go_highlight_format_strings = 1
    let g:go_highlight_functions = 1
    let g:go_highlight_function_calls = 1
    let g:go_highlight_function_parameters = 1
    let g:go_highlight_types = 1
    let g:go_highlight_generate_tags = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_string_spellcheck = 0
    let g:go_highlight_variable_declarations = 0
    let g:go_highlight_variable_assignments = 0

# - repo : hardcoreplayers/go-nvim
#   on_ft: [ go ,gomod ]

- repo: sebdah/vim-delve
  on_ft: go

# Markdown related
- repo: plasticboy/vim-markdown
  on_ft: markdown
  hook_add: |
    let g:vim_markdown_folding_level = 1
    let g:vim_markdown_folding_style_pythonic = 1
    let g:vim_markdown_frontmatter = 1
    let g:vim_markdown_auto_insert_bullets = 1
    let g:vim_markdown_new_list_item_indent = 0
    let g:vim_markdown_conceal_code_blocks = 0
    let g:vim_markdown_conceal = 0
    let g:vim_markdown_strikethrough = 1
    let g:vim_markdown_edit_url_in = 'vsplit'
    let g:vim_markdown_fenced_languages = [
      \ 'c++=cpp',
      \ 'viml=vim',
      \ 'bash=sh',
      \ 'ini=dosini',
      \ 'js=javascript',
      \ 'json=javascript',
      \ 'jsx=javascriptreact',
      \ 'tsx=typescriptreact',
      \ 'docker=Dockerfile',
      \ 'makefile=make',
      \ 'py=python'
      \ ]
# }}}

# Coding{{{
- repo: tyru/caw.vim
  on_map: { nx: <Plug> }

- repo: Yggdroot/indentLine
  on_ft: [python,html,css,javascript,javascriptreact,vue,c,c++,lua,rust,typescript,typescriptreact,php]
  hook_source: source $VIM_PATH/modules/module-indentline.vim

- repo: liuchengxu/vista.vim
  on_cmd: [Vista,Vista!,Vista!!]
  hook_source: source  $VIM_PATH/modules/module-vista.vim

- repo: mattn/emmet-vim
  on_event: InsertEnter
  on_ft: [python,html,css,javascript,javascriptreact,vue,c,c++,lua,rust,typescript,typescriptreact,php]
  hook_source: |
    let g:user_emmet_complete_tag = 0
    let g:user_emmet_install_global = 0
    let g:user_emmet_install_command = 0
    let g:user_emmet_mode = 'i'

- repo: luochen1990/rainbow
  on_ft: [python,javascript,javascriptreact,html,css,go,vim,toml]
  hook_source: let g:rainbow_active = 1

- repo: Shougo/echodoc.vim
  on_event: CompleteDone
  hook_source: |
        call echodoc#enable()
        let g:echodoc#type = "virtual"
# }}}

# Writing{{{
- repo: iamcco/markdown-preview.nvim
  on_ft: [markdown,pandoc.markdown,rmd]
  build: 'sh -c "cd app & yarn install"'
  hook_source: |
      let g:mkdp_auto_start = 0

- repo: ferrine/md-img-paste.vim
  on_ft: [markdown,pandoc.markdown,rmd]
  hook_source: |
    autocmd FileType markdown imap <buffer><silent> <C-P> <esc>:call mdip#MarkdownClipboardImage()<CR>
    let g:mdip_imgdir = 'img'
    let g:mdip_imgname = 'image'


- repo: junegunn/goyo.vim
  on_cmd: Goyo
  hook_source: source  $VIM_PATH/modules/module-goyo.vim

- repo: junegunn/Limelight.vim
  on_cmd: Limelight
#}}}

# Operator
- repo: kana/vim-operator-user

- repo: kana/vim-operator-replace
  on_map: { vnx: <Plug> }

- repo: machakann/vim-sandwich
  on_map: { vonx: <Plug>(operator-sandwich- }
  hook_add: |
    let g:sandwich_no_default_key_mappings = 1
    let g:operator_sandwich_no_default_key_mappings = 1
    let g:textobj_sandwich_no_default_key_mappings = 1

# TextObjectOperator
- repo: kana/vim-textobj-user

- { repo: terryma/vim-expand-region, on_map: { x: <Plug> }}

- { repo: AndrewRadev/splitjoin.vim, on_map: { n: <Plug>Splitjoin }}

- repo: AndrewRadev/dsf.vim
  on_map: { n: <Plug>Dsf }
  hook_add: let g:dsf_no_mappings = 1

#- repo: kana/vim-smartchr
#  on_event: InsertCharPre

- repo: osyo-manga/vim-textobj-multiblock
  on_map: { ox: <Plug> }
  hook_add:  let g:textobj_multiblock_no_default_key_mappings = 1

- repo: kana/vim-textobj-function
  on_map: { ox: <Plug> }
  hook_add: let g:textobj_function_no_default_key_mappings = 1

#
#  vim: set ts=2 sw=2 tw=80 et :
